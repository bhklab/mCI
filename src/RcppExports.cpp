// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// usable
bool usable(double x1, double x2, double delta);
RcppExport SEXP _wCI_usable(SEXP x1SEXP, SEXP x2SEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(usable(x1, x2, delta));
    return rcpp_result_gen;
END_RCPP
}
// usableHard
bool usableHard(double x1, double x2, double delta);
RcppExport SEXP _wCI_usableHard(SEXP x1SEXP, SEXP x2SEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(usableHard(x1, x2, delta));
    return rcpp_result_gen;
END_RCPP
}
// concordanceIndex_modified_helper
List concordanceIndex_modified_helper(std::vector<double> x, std::vector<double> y, double deltaX, double deltaY, double alpha, bool outx, std::string alternative, std::string logicOp);
RcppExport SEXP _wCI_concordanceIndex_modified_helper(SEXP xSEXP, SEXP ySEXP, SEXP deltaXSEXP, SEXP deltaYSEXP, SEXP alphaSEXP, SEXP outxSEXP, SEXP alternativeSEXP, SEXP logicOpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type deltaX(deltaXSEXP);
    Rcpp::traits::input_parameter< double >::type deltaY(deltaYSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type outx(outxSEXP);
    Rcpp::traits::input_parameter< std::string >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< std::string >::type logicOp(logicOpSEXP);
    rcpp_result_gen = Rcpp::wrap(concordanceIndex_modified_helper(x, y, deltaX, deltaY, alpha, outx, alternative, logicOp));
    return rcpp_result_gen;
END_RCPP
}
// kernel_gaussian_C
double kernel_gaussian_C(double x, double m, double s);
RcppExport SEXP _wCI_kernel_gaussian_C(SEXP xSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_gaussian_C(x, m, s));
    return rcpp_result_gen;
END_RCPP
}
// kernel_laplace_C
double kernel_laplace_C(double x, double m, double b);
RcppExport SEXP _wCI_kernel_laplace_C(SEXP xSEXP, SEXP mSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_laplace_C(x, m, b));
    return rcpp_result_gen;
END_RCPP
}
// concordanceIndex_modified_helper_weighted
List concordanceIndex_modified_helper_weighted(std::vector<double> x, std::vector<double> y, std::vector<double> deltaX, std::vector<double> deltaY, std::string weightingFun_pred, std::string weightingFun_obs, double alpha, bool outx, std::string alternative, std::string logicOp, double max_weight, double max_weight_obs);
RcppExport SEXP _wCI_concordanceIndex_modified_helper_weighted(SEXP xSEXP, SEXP ySEXP, SEXP deltaXSEXP, SEXP deltaYSEXP, SEXP weightingFun_predSEXP, SEXP weightingFun_obsSEXP, SEXP alphaSEXP, SEXP outxSEXP, SEXP alternativeSEXP, SEXP logicOpSEXP, SEXP max_weightSEXP, SEXP max_weight_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type deltaX(deltaXSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type deltaY(deltaYSEXP);
    Rcpp::traits::input_parameter< std::string >::type weightingFun_pred(weightingFun_predSEXP);
    Rcpp::traits::input_parameter< std::string >::type weightingFun_obs(weightingFun_obsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type outx(outxSEXP);
    Rcpp::traits::input_parameter< std::string >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< std::string >::type logicOp(logicOpSEXP);
    Rcpp::traits::input_parameter< double >::type max_weight(max_weightSEXP);
    Rcpp::traits::input_parameter< double >::type max_weight_obs(max_weight_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(concordanceIndex_modified_helper_weighted(x, y, deltaX, deltaY, weightingFun_pred, weightingFun_obs, alpha, outx, alternative, logicOp, max_weight, max_weight_obs));
    return rcpp_result_gen;
END_RCPP
}
// rCIPermC
SEXP rCIPermC(SEXP pin_x, SEXP pin_y, SEXP pobsCI, SEXP pR, SEXP pB, SEXP pn, SEXP pxties, SEXP pyties, SEXP palternative, SEXP pseed);
RcppExport SEXP _wCI_rCIPermC(SEXP pin_xSEXP, SEXP pin_ySEXP, SEXP pobsCISEXP, SEXP pRSEXP, SEXP pBSEXP, SEXP pnSEXP, SEXP pxtiesSEXP, SEXP pytiesSEXP, SEXP palternativeSEXP, SEXP pseedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin_x(pin_xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pin_y(pin_ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type pobsCI(pobsCISEXP);
    Rcpp::traits::input_parameter< SEXP >::type pR(pRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pB(pBSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pn(pnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pxties(pxtiesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pyties(pytiesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type palternative(palternativeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pseed(pseedSEXP);
    rcpp_result_gen = Rcpp::wrap(rCIPermC(pin_x, pin_y, pobsCI, pR, pB, pn, pxties, pyties, palternative, pseed));
    return rcpp_result_gen;
END_RCPP
}
// rCIBootC
SEXP rCIBootC(SEXP prcimat, SEXP pR, SEXP pn, SEXP pxties, SEXP pyties, SEXP pseed);
RcppExport SEXP _wCI_rCIBootC(SEXP prcimatSEXP, SEXP pRSEXP, SEXP pnSEXP, SEXP pxtiesSEXP, SEXP pytiesSEXP, SEXP pseedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type prcimat(prcimatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pR(pRSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pn(pnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pxties(pxtiesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pyties(pytiesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pseed(pseedSEXP);
    rcpp_result_gen = Rcpp::wrap(rCIBootC(prcimat, pR, pn, pxties, pyties, pseed));
    return rcpp_result_gen;
END_RCPP
}
// newPCI
SEXP newPCI(SEXP pin_x, SEXP pin_y, SEXP pn, SEXP pxties, SEXP pyties, SEXP pdeltaX, SEXP pdeltaY, SEXP plogic);
RcppExport SEXP _wCI_newPCI(SEXP pin_xSEXP, SEXP pin_ySEXP, SEXP pnSEXP, SEXP pxtiesSEXP, SEXP pytiesSEXP, SEXP pdeltaXSEXP, SEXP pdeltaYSEXP, SEXP plogicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin_x(pin_xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pin_y(pin_ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type pn(pnSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pxties(pxtiesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pyties(pytiesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pdeltaX(pdeltaXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pdeltaY(pdeltaYSEXP);
    Rcpp::traits::input_parameter< SEXP >::type plogic(plogicSEXP);
    rcpp_result_gen = Rcpp::wrap(newPCI(pin_x, pin_y, pn, pxties, pyties, pdeltaX, pdeltaY, plogic));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wCI_usable", (DL_FUNC) &_wCI_usable, 3},
    {"_wCI_usableHard", (DL_FUNC) &_wCI_usableHard, 3},
    {"_wCI_concordanceIndex_modified_helper", (DL_FUNC) &_wCI_concordanceIndex_modified_helper, 8},
    {"_wCI_kernel_gaussian_C", (DL_FUNC) &_wCI_kernel_gaussian_C, 3},
    {"_wCI_kernel_laplace_C", (DL_FUNC) &_wCI_kernel_laplace_C, 3},
    {"_wCI_concordanceIndex_modified_helper_weighted", (DL_FUNC) &_wCI_concordanceIndex_modified_helper_weighted, 12},
    {"_wCI_rCIPermC", (DL_FUNC) &_wCI_rCIPermC, 10},
    {"_wCI_rCIBootC", (DL_FUNC) &_wCI_rCIBootC, 6},
    {"_wCI_newPCI", (DL_FUNC) &_wCI_newPCI, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_wCI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
